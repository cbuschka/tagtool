#!/usr/bin/python
# -*- coding: UTF-8 -*-

import subprocess
import re
import sys

class TagFormat:
  def __init__(self, pattern):
    self.pattern = pattern

  def match(self, tag):
    return self.pattern.match(tag)

  def sortTags(self, tags):
    tags.sort(key=lambda tag: tag[0]*1000000+tag[1]*1000+tag[2])
 
  def format(self, tag):
    return "v{}.{}.{}".format(tag[0], tag[1], tag[2])

  def nextTag(self, sortedTags):
    lastTag = self.lastTag(sortedTags)
    if lastTag is None:
      nextTag = [1, 0, 0]
    else:
      nextTag = [lastTag[0], lastTag[1], lastTag[2]+1 ]
    return nextTag

  def lastTag(self, sortedTags):
    if len(sortedTags) == 0:
      return None
    else:
      return sortedTags[-1]

class Git:
  def __init__(self):
   pass

  def getTags(self, tagFormat):
    tags = [] 
    proc = subprocess.Popen(['git', 'tag', '-l'], shell=False, stdout=subprocess.PIPE)
    for line in proc.stdout:
      match = tagFormat.match(line.rstrip())
      if match:
        tags.append([int(match.group(1)), int(match.group(2)), int(match.group(3)) ])

    return tags

class Command:
  def __init__(self):
    self.git = Git()
    pattern = re.compile('^v([0-9]+)\.([0-9]+)\.([0-9]+)$')
    self.tagFormat = TagFormat(pattern)

  def run(self, args):
    tags = self.git.getTags(self.tagFormat)
    self.tagFormat.sortTags(tags)
    if len(args) > 1 and args[1] == 'last':
      lastTag = self.tagFormat.lastTag(tags)
      if lastTag is not None:
        print(self.tagFormat.format(lastTag))
      return 1
    elif len(args) > 1 and args[1] == 'next':
      nextTag = self.tagFormat.nextTag(tags)
      print(self.tagFormat.format(nextTag))
    else:
      print("tagtool curr|next")
      return 1

    return 0
 
if __name__ == '__main__':
  command = Command()
  exitCode = command.run(sys.argv)
  sys.exit(exitCode)

